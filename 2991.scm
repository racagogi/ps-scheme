(define (bite time a b c d)
  (let ((aterm (modulo time (+ a b)))
        (bterm (modulo time (+ c d))))
    (cond ((and (<= aterm a) (<= bterm c)) (print 2))
          ((and (or (> aterm a) (= aterm 0)) (or (> bterm c) (= bterm 0))) (print 0))
          (else (print 1)))))
(let ((a (read))
      (b (read))
      (c (read))
      (d (read))
      (p (read))
      (m (read))
      (n (read)))
  (bite p a b c d)
  (bite m a b c d)
  (bite n a b c d))
