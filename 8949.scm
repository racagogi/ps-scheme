(define (parse n acc)
  (if (> n 10)
    (parse (quotient n 10) (cons (modulo n 10) acc))
    (cons n acc)))
(define (padd acc count)
  (if (> count 0)
    (padd (cons 0 acc) (- count 1))
    acc))
(define (zip n m acc)
  (if (equal? n '())
    (print-num (reverse acc))
    (zip (cdr n) (cdr m) (cons (+ (car n) (car m)) acc))))
(define (print-num n)
  (if (equal? n '())
    (newline)
    (begin (display (car n))
           (print-num (cdr n)))))
(let* ((n (read))
       (m (read))
       (nl (parse n '()))
       (ml (parse m '())))
  (if (> (length nl) (length ml))
    (zip nl (padd ml (- (length nl) (length ml))) '())
    (zip ml (padd nl (- (length ml) (length nl))) '())))
